"use strict";
var async = require("async");
var Promise = require("bluebird");
var lsusbdev_1 = require("lsusbdev");
var mrtu = require("modbus-serial");
var Models = require('./models.json');
var Model;
var Client = new mrtu();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = function (o) {
    return new Promise(function (resolve, reject) {
        var answer = {};
        var registers;
        function availablemodels() {
            var models = [];
            for (var i = 0; i < Models.length; i++) {
                models.push(Models[i].label);
            }
            return models;
        }
        function connectRTU() {
            function start() {
                Client.setID(o.id);
                async.eachSeries(registers, function (regi, cb) {
                    Client.readInputRegisters(regi.reg, 2, function (err, data) {
                        if (err) {
                            cb(err);
                        }
                        else {
                            if (regi.group) {
                                if (!answer[regi.group])
                                    answer[regi.group] = {};
                                answer[regi.group][regi.label] = data.buffer.readFloatBE();
                            }
                            else {
                                answer[regi.label] = data.buffer.readFloatBE();
                            }
                            cb();
                        }
                    });
                }, function (err) {
                    Client.close();
                    if (err) {
                        reject(err);
                    }
                    else {
                        var pkg = require("./package.json");
                        answer.apiVersion = pkg.name + ' - ' + pkg.version;
                        answer.unixTimestamp = new Date().getTime();
                        if (o.uid) {
                            answer.uid = o.uid;
                            if (o.className) {
                                answer._id = o.className + "_" + o.uid + '_' + answer.unixTimestamp;
                            }
                            else {
                                answer._id = "data_" + o.uid + '_' + answer.unixTimestamp;
                            }
                        }
                        resolve(answer);
                    }
                });
            }
            Client.setTimeout(10000);
            Client.connectRTUBuffered(o.dev, { baudrate: o.baud }, start);
        }
        if (!o) {
            reject("No conf provided");
        }
        else if (!o.dev && !o.hub) {
            reject("No dev");
        }
        else if (!o.model) {
            reject("No model provided. Available models are: " + availablemodels());
        }
        else {
            for (var i = 0; i < Models.length; i++) {
                if (Models[i].label === o.model) {
                    registers = Models[i].registers;
                }
            }
            if (registers && registers.length && registers[0] && (registers[0].reg || registers[0].reg === 0) && registers[0].label) {
                if (o.dev) {
                    connectRTU();
                }
                else if (!o.dev && o.hub) {
                    lsusbdev_1.default().then(function (data) {
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].hub === o.hub) {
                                o.dev = data[i].dev;
                            }
                        }
                        if (o.dev) {
                            connectRTU();
                        }
                        else {
                            reject("No dev for " + o.hub);
                        }
                    }).catch(function (err) {
                        reject(err);
                    });
                }
            }
            else {
                reject("No model founded. Available models are: " + availablemodels());
            }
        }
    });
};

//# sourceMappingURL=data:application/json;base64,
